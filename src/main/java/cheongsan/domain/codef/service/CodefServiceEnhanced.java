package cheongsan.domain.codef.service;

import cheongsan.common.util.CodefRSAUtil;
import cheongsan.domain.codef.dto.*;
import cheongsan.domain.debt.entity.DebtAccount;
import cheongsan.domain.debt.entity.DebtTransaction;
import cheongsan.domain.debt.mapper.DebtMapper;
import cheongsan.domain.debt.mapper.DebtTransactionMapper;
import cheongsan.domain.debt.mapper.FinancialInstitutionMapper;
import cheongsan.domain.deposit.entity.DepositAccount;
import cheongsan.domain.deposit.entity.Transaction;
import cheongsan.domain.deposit.mapper.DepositAccountMapper;
import cheongsan.domain.deposit.mapper.DepositMapper;
import cheongsan.domain.user.entity.User;
import cheongsan.domain.user.mapper.UserMapper;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import lombok.extern.log4j.Log4j2;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.math.BigDecimal;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLDecoder;
import java.nio.charset.StandardCharsets;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;

@Log4j2
@Service
//@RequiredArgsConstructor
public class CodefServiceEnhanced implements CodefService {
    private final UserMapper userMapper;
    private final DebtMapper debtMapper;
    private final DepositMapper depositMapper;
    private final DepositAccountMapper depositAccountMapper;
    private final FinancialInstitutionMapper financialInstitutionMapper;
    private final DebtTransactionMapper debtTransactionMapper;
    private final CodefRSAUtil codefRSAUtil;
    private final ObjectMapper codefObjectMapper;

    @Value("${codef.client-id}")
    private String clientId;

    @Value("${codef.client-secret}")
    private String clientSecret;

    private static final String TOKEN_URL = "https://oauth.codef.io/oauth/token";
    private static final String CREATE_ACCOUNT_URL = "https://development.codef.io/v1/account/create";
    private static final String ACCOUNT_LIST_URL = "https://development.codef.io/v1/kr/bank/p/account/account-list";
    private static final String TRANSACTION_LIST_URL = "https://development.codef.io/v1/kr/bank/p/account/transaction-list";
    private static final String LOAN_TRANSACTION_URL = "https://development.codef.io/v1/kr/bank/p/loan/transaction-list";

    // ‚úÖ ÏÉùÏÑ±ÏûêÏóêÏÑú CODEF Ï†ÑÏö© ObjectMapper Ï¥àÍ∏∞Ìôî
    public CodefServiceEnhanced(UserMapper userMapper, DebtMapper debtMapper,
                                DepositMapper depositMapper, DepositAccountMapper depositAccountMapper,
                                FinancialInstitutionMapper financialInstitutionMapper,
                                DebtTransactionMapper debtTransactionMapper,
                                CodefRSAUtil codefRSAUtil) {
        this.userMapper = userMapper;
        this.debtMapper = debtMapper;
        this.depositMapper = depositMapper;
        this.depositAccountMapper = depositAccountMapper;
        this.financialInstitutionMapper = financialInstitutionMapper;
        this.debtTransactionMapper = debtTransactionMapper;
        this.codefRSAUtil = codefRSAUtil;

        // CODEF API Ï†ÑÏö© ObjectMapper ÏÑ§Ï†ï
        this.codefObjectMapper = new ObjectMapper();
        this.codefObjectMapper.registerModule(new JavaTimeModule());
        this.codefObjectMapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
        this.codefObjectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
        // ‚úÖ snake_case Ï†ÑÎûµ Ï†úÍ±∞ (camelCase Ïú†ÏßÄ)
    }


    @Override
    public String getAccessToken() {
        try {
            URL url = new URL(TOKEN_URL);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("POST");
            conn.setDoOutput(true);

            // Basic Auth ÏÑ§Ï†ï
            String auth = clientId + ":" + clientSecret;
            String encodedAuth = Base64.getEncoder().encodeToString(auth.getBytes(StandardCharsets.UTF_8));
            conn.setRequestProperty("Authorization", "Basic " + encodedAuth);
            conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");

            // Body ÏûëÏÑ±
            String body = "grant_type=client_credentials&scope=read";
            try (OutputStream os = conn.getOutputStream()) {
                os.write(body.getBytes(StandardCharsets.UTF_8));
            }

            // ÏùëÎãµ ÏùΩÍ∏∞
            StringBuilder response = new StringBuilder();
            try (BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream(), StandardCharsets.UTF_8))) {
                String line;
                while ((line = br.readLine()) != null) {
                    response.append(line);
                }
            }

            TokenResponseDTO tokenResponse = codefObjectMapper.readValue(response.toString(), TokenResponseDTO.class);
            log.info("ÌÜ†ÌÅ∞ Î∞úÍ∏â ÏÑ±Í≥µ");
            return tokenResponse.getAccess_token();

        } catch (Exception e) {
            log.error("ÌÜ†ÌÅ∞ Î∞úÍ∏â Ïã§Ìå®", e);
            throw new RuntimeException("CODEF ÌÜ†ÌÅ∞ Î∞úÍ∏â Ïã§Ìå®", e);
        }
    }

    // ‚úÖ ÏÉàÎ°ú Ï∂îÍ∞ÄÌï† Ìó¨Ìçº Î©îÏÑúÎìúÎì§

    /**
     * ÎπÑÎ∞ÄÎ≤àÌò∏ RSA ÏïîÌò∏Ìôî
     */
    private ConnectedIdRequestDTO encryptPasswords(ConnectedIdRequestDTO requestDTO) {
        List<ConnectedIdRequestDTO.AccountInfo> encryptedAccountList = new ArrayList<>();

        for (ConnectedIdRequestDTO.AccountInfo account : requestDTO.getAccountList()) {
            ConnectedIdRequestDTO.AccountInfo encryptedAccount = ConnectedIdRequestDTO.AccountInfo.builder()
                    .countryCode(account.getCountryCode())
                    .businessType(account.getBusinessType())
                    .organization(account.getOrganization())
                    .clientType(account.getClientType())
                    .loginType(account.getLoginType())
                    .id(account.getId())
                    .password(codefRSAUtil.encryptPassword(account.getPassword())) // ‚úÖ RSA ÏïîÌò∏Ìôî
                    .build();

            encryptedAccountList.add(encryptedAccount);
            log.info("ÎπÑÎ∞ÄÎ≤àÌò∏ RSA ÏïîÌò∏Ìôî ÏôÑÎ£å: organization={}, id={}",
                    account.getOrganization(), account.getId());
        }

        return ConnectedIdRequestDTO.builder()
                .accountList(encryptedAccountList)
                .build();
    }

    /**
     * Î°úÍ∑∏Ïö© ÎπÑÎ∞ÄÎ≤àÌò∏ ÎßàÏä§ÌÇπ
     */
    private String maskPassword(String jsonBody) {
        return jsonBody.replaceAll("\"password\":\"[^\"]*\"", "\"password\":\"****\"");
    }

    @Override
    public String createConnectedId(ConnectedIdRequestDTO requestDTO) {
        try {
            // ‚úÖ RSA ÏïîÌò∏Ìôî Ï∂îÍ∞Ä - ÎπÑÎ∞ÄÎ≤àÌò∏ ÏïîÌò∏Ìôî
            ConnectedIdRequestDTO encryptedRequestDTO = encryptPasswords(requestDTO);

            String accessToken = getAccessToken();

            URL url = new URL(CREATE_ACCOUNT_URL);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("POST");
            conn.setDoOutput(true);
            conn.setRequestProperty("Authorization", "Bearer " + accessToken);
            conn.setRequestProperty("Content-Type", "application/json");

            // üö® Ïò¨Î∞îÎ•∏ JSON ÏßÅÏ†ë ÏÉùÏÑ±
            ConnectedIdRequestDTO.AccountInfo account = requestDTO.getAccountList().get(0);
            String encryptedPassword = codefRSAUtil.encryptPassword(account.getPassword());

            String jsonBody = String.format(
                    "{\"accountList\":[{\"countryCode\":\"%s\",\"businessType\":\"%s\",\"organization\":\"%s\",\"clientType\":\"%s\",\"loginType\":\"%s\",\"id\":\"%s\",\"password\":\"%s\"}]}",
                    account.getCountryCode(), account.getBusinessType(), account.getOrganization(),
                    account.getClientType(), account.getLoginType(), account.getId(), encryptedPassword
            );

            try (OutputStream os = conn.getOutputStream()) {
                os.write(jsonBody.getBytes(StandardCharsets.UTF_8));
            }

            // ÏùëÎãµ ÏΩîÎìú ÌôïÏù∏
            int responseCode = conn.getResponseCode();
            log.info("CODEF ÏùëÎãµ ÏΩîÎìú: {}", responseCode);

            StringBuilder response = new StringBuilder();

            // ÏÑ±Í≥µ ÏùëÎãµÍ≥º Ïò§Î•ò ÏùëÎãµÏùÑ Íµ¨Î∂ÑÌï¥ÏÑú Ï≤òÎ¶¨
            try (BufferedReader br = new BufferedReader(new InputStreamReader(
                    responseCode >= 200 && responseCode < 300 ? conn.getInputStream() : conn.getErrorStream(),
                    StandardCharsets.UTF_8))) {
                String line;
                while ((line = br.readLine()) != null) {
                    response.append(line);
                }
            }

            String responseBody = response.toString();
            log.info("CODEF ÏõêÎ≥∏ ÏùëÎãµ: {}", responseBody);

            // ‚úÖ URL ÎîîÏΩîÎî© Ï≤òÎ¶¨ Ï∂îÍ∞Ä
            String decodedResponse = responseBody;
            try {
                if (responseBody.startsWith("%")) {
                    decodedResponse = URLDecoder.decode(responseBody, StandardCharsets.UTF_8.name());
                    log.info("URL ÎîîÏΩîÎî©Îêú ÏùëÎãµ: {}", decodedResponse);
                }
            } catch (Exception e) {
                log.warn("URL ÎîîÏΩîÎî© Ïã§Ìå®, ÏõêÎ≥∏ ÏÇ¨Ïö©: {}", e.getMessage());
            }

            ConnectedIdResponseDTO responseDTO = codefObjectMapper.readValue(decodedResponse, ConnectedIdResponseDTO.class);

            // ‚úÖ Í≤∞Í≥º ÏΩîÎìú ÌôïÏù∏ Ï∂îÍ∞Ä
            if (responseDTO.getResult() != null && responseDTO.getResult().getCode() != null) {
                String resultCode = responseDTO.getResult().getCode();
                String message = responseDTO.getResult().getMessage();

                if (!"CF-00000".equals(resultCode)) {
                    log.error("CODEF API Ïò§Î•ò - ÏΩîÎìú: {}, Î©îÏãúÏßÄ: {}", resultCode, message);
                    throw new RuntimeException("CODEF API Ïò§Î•ò: " + message + " (ÏΩîÎìú: " + resultCode + ")");
                }
            }

            // üö® DTO ÌååÏã± ÎåÄÏã† Ï†ïÍ∑úÏãùÏúºÎ°ú connectedId ÏßÅÏ†ë Ï∂îÏ∂ú
            String connectedId = null;
            try {
                java.util.regex.Pattern pattern = java.util.regex.Pattern.compile("\"connectedId\":\"([^\"]+)\"");
                java.util.regex.Matcher matcher = pattern.matcher(decodedResponse);
                if (matcher.find()) {
                    connectedId = matcher.group(1);
                    log.info("Ï†ïÍ∑úÏãùÏúºÎ°ú connectedId Ï∂îÏ∂ú ÏÑ±Í≥µ: {}", connectedId);
                } else {
                    log.error("Ï†ïÍ∑úÏãùÏúºÎ°ú connectedIdÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§. JSON: {}", decodedResponse);
                }
            } catch (Exception e) {
                log.error("connectedId Ï∂îÏ∂ú Ï§ë Ïò§Î•ò Î∞úÏÉù", e);
            }

            if (connectedId == null || connectedId.isEmpty()) {
                throw new RuntimeException("Connected IDÎ•º Î∞õÏßÄ Î™ªÌñàÏäµÎãàÎã§. JSON: " + decodedResponse);
            }

            log.info("Connected ID ÏÉùÏÑ± ÏÑ±Í≥µ: {}", connectedId);
            return connectedId;

        } catch (Exception e) {
            log.error("Connected ID ÏÉùÏÑ± Ïã§Ìå®", e);
            throw new RuntimeException("Connected ID ÏÉùÏÑ± Ïã§Ìå®: " + e.getMessage(), e);
        }
    }

    @Override
    public AccountListResponseDTO getAccountList(String connectedId, String organizationCode) {
        try {
            String accessToken = getAccessToken();

            URL url = new URL(ACCOUNT_LIST_URL);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("POST");
            conn.setDoOutput(true);
            conn.setRequestProperty("Authorization", "Bearer " + accessToken);
            conn.setRequestProperty("Content-Type", "application/json");

            Map<String, String> requestBody = new HashMap<>();
            requestBody.put("connectedId", connectedId);
            requestBody.put("organization", organizationCode);

            String jsonBody = codefObjectMapper.writeValueAsString(requestBody);
            try (OutputStream os = conn.getOutputStream()) {
                os.write(jsonBody.getBytes(StandardCharsets.UTF_8));
            }

            StringBuilder response = new StringBuilder();
            try (BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream(), StandardCharsets.UTF_8))) {
                String line;
                while ((line = br.readLine()) != null) {
                    response.append(line);
                }
            }

            String responseBody = response.toString();
            log.info("CODEF Í≥ÑÏ¢å Î™©Î°ù ÏõêÎ≥∏ ÏùëÎãµ: {}", responseBody);

            // üö® URL ÎîîÏΩîÎî© Ï≤òÎ¶¨ Ï∂îÍ∞Ä (createConnectedIdÏôÄ ÎèôÏùºÌïú Î°úÏßÅ)
            String decodedResponse = responseBody;
            try {
                if (responseBody.startsWith("%")) {
                    decodedResponse = URLDecoder.decode(responseBody, StandardCharsets.UTF_8.name());
                    log.info("URL ÎîîÏΩîÎî©Îêú Í≥ÑÏ¢å Î™©Î°ù ÏùëÎãµ: {}", decodedResponse);
                }
            } catch (Exception e) {
                log.warn("URL ÎîîÏΩîÎî© Ïã§Ìå®, ÏõêÎ≥∏ ÏÇ¨Ïö©: {}", e.getMessage());
            }

            // üö® ÎîîÏΩîÎî©Îêú ÏùëÎãµÏúºÎ°ú JSON ÌååÏã±
            AccountListResponseDTO responseDTO = codefObjectMapper.readValue(decodedResponse, AccountListResponseDTO.class);
            // üö® null Ï≤¥ÌÅ¨ Í∞ïÌôî
            int depositCount = 0;
            int loanCount = 0;

            if (responseDTO.getData() != null) {
                if (responseDTO.getData().getResDepositTrust() != null) {
                    depositCount = responseDTO.getData().getResDepositTrust().size();
                }
                if (responseDTO.getData().getResLoan() != null) {
                    loanCount = responseDTO.getData().getResLoan().size();
                }
            }

            log.info("Í≥ÑÏ¢å Î™©Î°ù Ï°∞Ìöå ÏÑ±Í≥µ: ÏòàÍ∏àÍ≥ÑÏ¢å {}Í±¥, ÎåÄÏ∂úÍ≥ÑÏ¢å {}Í±¥", depositCount, loanCount);
            log.info("ÏùëÎãµ Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏ - data: {}, resDepositTrust: {}, resLoan: {}",
                    responseDTO.getData() != null,
                    responseDTO.getData() != null ? responseDTO.getData().getResDepositTrust() != null : false,
                    responseDTO.getData() != null ? responseDTO.getData().getResLoan() != null : false);

            return responseDTO;

        } catch (Exception e) {
            log.error("Í≥ÑÏ¢å Î™©Î°ù Ï°∞Ìöå Ïã§Ìå®", e);
            throw new RuntimeException("Í≥ÑÏ¢å Î™©Î°ù Ï°∞Ìöå Ïã§Ìå®", e);
        }
    }

    @Override
    public TransactionListResponseDTO getTransactionListWithDates(String connectedId, String organizationCode, String accountNumber, String startDate, String endDate) {
        try {
            String accessToken = getAccessToken();

            URL url = new URL(TRANSACTION_LIST_URL);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("POST");
            conn.setDoOutput(true);
            conn.setRequestProperty("Authorization", "Bearer " + accessToken);
            conn.setRequestProperty("Content-Type", "application/json");

            Map<String, String> requestBody = new HashMap<>();
            requestBody.put("connectedId", connectedId);
            requestBody.put("organization", organizationCode);
            requestBody.put("account", accountNumber);
            requestBody.put("startDate", startDate);
            requestBody.put("endDate", endDate);
            requestBody.put("orderBy", "0");

            log.info("Í±∞ÎûòÎÇ¥Ïó≠ Ï°∞Ìöå ÌååÎùºÎØ∏ÌÑ∞: startDate={}, endDate={}", startDate, endDate);

            String jsonBody = codefObjectMapper.writeValueAsString(requestBody);
            try (OutputStream os = conn.getOutputStream()) {
                os.write(jsonBody.getBytes(StandardCharsets.UTF_8));
            }

            int responseCode = conn.getResponseCode();
            log.info("CODEF Í±∞ÎûòÎÇ¥Ïó≠ ÏùëÎãµ ÏΩîÎìú: {}", responseCode);

            StringBuilder response = new StringBuilder();
            try (BufferedReader br = new BufferedReader(new InputStreamReader(
                    responseCode >= 200 && responseCode < 300 ? conn.getInputStream() : conn.getErrorStream(),
                    StandardCharsets.UTF_8))) {
                String line;
                while ((line = br.readLine()) != null) {
                    response.append(line);
                }
            }

            String responseBody = response.toString();
            log.info("CODEF Í±∞ÎûòÎÇ¥Ïó≠ ÏõêÎ≥∏ ÏùëÎãµ: {}", responseBody);

            // URL ÎîîÏΩîÎî© Ï≤òÎ¶¨
            String decodedResponse = responseBody;
            try {
                if (responseBody.startsWith("%")) {
                    decodedResponse = URLDecoder.decode(responseBody, StandardCharsets.UTF_8.name());
                    log.info("URL ÎîîÏΩîÎî©Îêú Í±∞ÎûòÎÇ¥Ïó≠ ÏùëÎãµ: {}", decodedResponse);
                }
            } catch (Exception e) {
                log.warn("URL ÎîîÏΩîÎî© Ïã§Ìå®, ÏõêÎ≥∏ ÏÇ¨Ïö©: {}", e.getMessage());
            }

            TransactionListResponseDTO responseDTO = codefObjectMapper.readValue(decodedResponse, TransactionListResponseDTO.class);

            // Í≤∞Í≥º ÏΩîÎìú ÌôïÏù∏
            if (responseDTO.getResult() != null && responseDTO.getResult().getCode() != null) {
                String resultCode = responseDTO.getResult().getCode();
                String message = responseDTO.getResult().getMessage();

                if (!"CF-00000".equals(resultCode)) {
                    log.error("CODEF API Ïò§Î•ò - ÏΩîÎìú: {}, Î©îÏãúÏßÄ: {}", resultCode, message);
                    throw new RuntimeException("CODEF API Ïò§Î•ò: " + message + " (ÏΩîÎìú: " + resultCode + ")");
                }
            }

            log.info("Í±∞ÎûòÎÇ¥Ïó≠ Ï°∞Ìöå ÏÑ±Í≥µ: {}Í±¥",
                    responseDTO.getData() != null && responseDTO.getData().getResTrHistoryList() != null ?
                            responseDTO.getData().getResTrHistoryList().size() : 0);
            return responseDTO;

        } catch (Exception e) {
            log.error("Í±∞ÎûòÎÇ¥Ïó≠ Ï°∞Ìöå Ïã§Ìå®", e);
            throw new RuntimeException("Í±∞ÎûòÎÇ¥Ïó≠ Ï°∞Ìöå Ïã§Ìå®", e);
        }
    }

    @Override
    public LoanTransactionResponseDTO getLoanTransactionList(String connectedId, String organizationCode, String accountNumber, String startDate, String endDate) {
        try {
            String accessToken = getAccessToken();

            URL url = new URL(LOAN_TRANSACTION_URL);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("POST");
            conn.setDoOutput(true);
            conn.setRequestProperty("Authorization", "Bearer " + accessToken);
            conn.setRequestProperty("Content-Type", "application/json");

            Map<String, String> requestBody = new HashMap<>();
            requestBody.put("connectedId", connectedId);
            requestBody.put("organization", organizationCode);
            requestBody.put("account", accountNumber);
            requestBody.put("startDate", startDate);
            requestBody.put("endDate", endDate);
            requestBody.put("orderBy", "0");

            String jsonBody = codefObjectMapper.writeValueAsString(requestBody);
            try (OutputStream os = conn.getOutputStream()) {
                os.write(jsonBody.getBytes(StandardCharsets.UTF_8));
            }

            // ‚úÖ ÏùëÎãµ ÏΩîÎìú ÌôïÏù∏ Ï∂îÍ∞Ä
            int responseCode = conn.getResponseCode();
            log.info("CODEF ÎåÄÏ∂ú Í±∞ÎûòÎÇ¥Ïó≠ ÏùëÎãµ ÏΩîÎìú: {}", responseCode);

            StringBuilder response = new StringBuilder();
            try (BufferedReader br = new BufferedReader(new InputStreamReader(
                    responseCode >= 200 && responseCode < 300 ? conn.getInputStream() : conn.getErrorStream(),
                    StandardCharsets.UTF_8))) {
                String line;
                while ((line = br.readLine()) != null) {
                    response.append(line);
                }
            }

            String responseBody = response.toString();
            log.info("CODEF ÎåÄÏ∂ú Í±∞ÎûòÎÇ¥Ïó≠ ÏõêÎ≥∏ ÏùëÎãµ: {}", responseBody);

            // ‚úÖ URL ÎîîÏΩîÎî© Ï≤òÎ¶¨ Ï∂îÍ∞Ä (Îã§Î•∏ Î©îÏÑúÎìúÏôÄ ÎèôÏùºÌïú Î°úÏßÅ)
            String decodedResponse = responseBody;
            try {
                if (responseBody.startsWith("%")) {
                    decodedResponse = URLDecoder.decode(responseBody, StandardCharsets.UTF_8.name());
                    log.info("URL ÎîîÏΩîÎî©Îêú ÎåÄÏ∂ú Í±∞ÎûòÎÇ¥Ïó≠ ÏùëÎãµ: {}", decodedResponse);
                }
            } catch (Exception e) {
                log.warn("URL ÎîîÏΩîÎî© Ïã§Ìå®, ÏõêÎ≥∏ ÏÇ¨Ïö©: {}", e.getMessage());
            }

            // ‚úÖ ÎîîÏΩîÎî©Îêú ÏùëÎãµÏúºÎ°ú JSON ÌååÏã±
            LoanTransactionResponseDTO responseDTO = codefObjectMapper.readValue(decodedResponse, LoanTransactionResponseDTO.class);

            // ‚úÖ Í≤∞Í≥º ÏΩîÎìú ÌôïÏù∏ Ï∂îÍ∞Ä
            if (responseDTO.getResult() != null && responseDTO.getResult().getCode() != null) {
                String resultCode = responseDTO.getResult().getCode();
                String message = responseDTO.getResult().getMessage();

                if (!"CF-00000".equals(resultCode)) {
                    log.error("CODEF API Ïò§Î•ò - ÏΩîÎìú: {}, Î©îÏãúÏßÄ: {}", resultCode, message);
                    throw new RuntimeException("CODEF API Ïò§Î•ò: " + message + " (ÏΩîÎìú: " + resultCode + ")");
                }
            }

            log.info("ÎåÄÏ∂ú Í±∞ÎûòÎÇ¥Ïó≠ Ï°∞Ìöå ÏÑ±Í≥µ: {}Í±¥",
                    responseDTO.getData() != null && responseDTO.getData().getResTrHistoryList() != null ?
                            responseDTO.getData().getResTrHistoryList().size() : 0);
            return responseDTO;

        } catch (Exception e) {
            log.error("ÎåÄÏ∂ú Í±∞ÎûòÎÇ¥Ïó≠ Ï°∞Ìöå Ïã§Ìå®", e);
            throw new RuntimeException("ÎåÄÏ∂ú Í±∞ÎûòÎÇ¥Ïó≠ Ï°∞Ìöå Ïã§Ìå®", e);
        }
    }

    @Override
    @Transactional
    public void syncUserAccountData(Long userId) {
        try {
            User user = userMapper.findById(userId);
            if (user == null) {
                throw new IllegalArgumentException("ÏÇ¨Ïö©ÏûêÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.");
            }

            String connectedId = user.getConnectedId();
            if (connectedId == null || connectedId.isEmpty()) {
                log.warn("ÏÇ¨Ïö©Ïûê(ID: {})Ïùò Connected IDÍ∞Ä ÏóÜÏäµÎãàÎã§.", userId);
                return;
            }

            // Í∏àÏúµÍ∏∞Í¥ÄÎ≥ÑÎ°ú Í≥ÑÏ¢å Ï†ïÎ≥¥ Ï°∞Ìöå (ÌïòÎÇòÏùÄÌñâ ÏòàÏãú)
            List<String> organizationCodes = Arrays.asList("0081"); // Ïã§Ï†úÎ°úÎäî ÏÇ¨Ïö©ÏûêÍ∞Ä Ïó∞Í≤∞Ìïú Í∏àÏúµÍ∏∞Í¥ÄÎì§

            for (String orgCode : organizationCodes) {
                syncAccountDataForOrganization(userId, connectedId, orgCode);
            }

        } catch (Exception e) {
            log.error("ÏÇ¨Ïö©Ïûê Í≥ÑÏ¢å Îç∞Ïù¥ÌÑ∞ ÎèôÍ∏∞Ìôî Ïã§Ìå®: userId={}", userId, e);
            throw new RuntimeException("Í≥ÑÏ¢å Îç∞Ïù¥ÌÑ∞ ÎèôÍ∏∞Ìôî Ïã§Ìå®", e);
        }
    }

    private void syncAccountDataForOrganization(Long userId, String connectedId, String organizationCode) {
        try {
            AccountListResponseDTO accountList = getAccountList(connectedId, organizationCode);

            if (accountList.getData() == null) {
                log.warn("Í≥ÑÏ¢å Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§. userId={}, orgCode={}", userId, organizationCode);
                return;
            }

            // ÏòàÍ∏àÍ≥ÑÏ¢å ÎèôÍ∏∞Ìôî
            if (accountList.getData().getResDepositTrust() != null) {
                syncDepositAccounts(userId, organizationCode, accountList.getData().getResDepositTrust(), connectedId);
            }

            // ÎåÄÏ∂úÍ≥ÑÏ¢å ÎèôÍ∏∞Ìôî
            if (accountList.getData().getResLoan() != null) {
                syncLoanAccounts(userId, organizationCode, accountList.getData().getResLoan(), connectedId);
            }

        } catch (Exception e) {
            log.error("Í∏∞Í¥ÄÎ≥Ñ Í≥ÑÏ¢å Îç∞Ïù¥ÌÑ∞ ÎèôÍ∏∞Ìôî Ïã§Ìå®: userId={}, orgCode={}", userId, organizationCode, e);
        }
    }

    private void syncDepositAccounts(Long userId, String organizationCode, List<AccountListResponseDTO.DepositAccount> depositAccounts, String connectedId) {
        for (AccountListResponseDTO.DepositAccount account : depositAccounts) {
            try {
                // Ïù¥ÎØ∏ Ï°¥Ïû¨ÌïòÎäî ÏòàÍ∏àÍ≥ÑÏ¢åÏù∏ÏßÄ ÌôïÏù∏
                if (depositAccountMapper.isDepositAccountExists(userId, account.getResAccount())) {
                    log.info("Ïù¥ÎØ∏ Ï°¥Ïû¨ÌïòÎäî ÏòàÍ∏àÍ≥ÑÏ¢å: {}", account.getResAccount());
                    // ÏûîÏï°Îßå ÏóÖÎç∞Ïù¥Ìä∏
                    DepositAccount existingAccount = depositAccountMapper.findByUserIdAndAccountNumber(userId, account.getResAccount());
                    if (existingAccount != null) {
                        BigDecimal newBalance = new BigDecimal(account.getResAccountBalance() != null ? account.getResAccountBalance() : "0");
                        depositAccountMapper.updateBalance(existingAccount.getId(), newBalance);
                    }
                    continue;
                }

                // ÏÉàÎ°úÏö¥ ÏòàÍ∏àÍ≥ÑÏ¢å Ï†ïÎ≥¥ Ï†ÄÏû•
                DepositAccount depositAccount = DepositAccount.builder()
                        .userId(userId)
                        .organizationCode(organizationCode)
                        .accountNumber(account.getResAccount())
                        .currentBalance(new BigDecimal(account.getResAccountBalance() != null ? account.getResAccountBalance() : "0"))
                        .build();

                depositAccountMapper.insertDepositAccount(depositAccount);
                log.info("ÏÉàÎ°úÏö¥ ÏòàÍ∏àÍ≥ÑÏ¢å Ï†ÄÏû•: {}", account.getResAccount());

                // Í±∞ÎûòÎÇ¥Ïó≠ Ï°∞Ìöå Î∞è Ï†ÄÏû•
                syncTransactionHistory(userId, connectedId, organizationCode, account.getResAccount());

            } catch (Exception e) {
                log.error("ÏòàÍ∏àÍ≥ÑÏ¢å ÎèôÍ∏∞Ìôî Ïã§Ìå®: account={}", account.getResAccount(), e);
            }
        }
    }

    private void syncLoanAccounts(Long userId, String organizationCode, List<AccountListResponseDTO.LoanAccount> loanAccounts, String connectedId) {
        for (AccountListResponseDTO.LoanAccount account : loanAccounts) {
            try {
                // Í∏àÏúµÍ∏∞Í¥Ä ÏΩîÎìú Ï°∞Ìöå ÎòêÎäî Îì±Î°ù
                Long orgCodeLong = getOrCreateFinancialInstitution(organizationCode);

                // Ïù¥ÎØ∏ Ï°¥Ïû¨ÌïòÎäî ÎåÄÏ∂úÍ≥ÑÏ¢åÏù∏ÏßÄ ÌôïÏù∏
                if (debtMapper.isDebtAccountExists(userId, account.getResAccount())) {
                    log.info("Ïù¥ÎØ∏ Ï°¥Ïû¨ÌïòÎäî ÎåÄÏ∂úÍ≥ÑÏ¢å: {}", account.getResAccount());
                    continue;
                }

                // ÎåÄÏ∂úÍ≥ÑÏ¢å Ï†ïÎ≥¥Î•º debt_accounts ÌÖåÏù¥Î∏îÏóê Ï†ÄÏû•
                DebtAccount debtAccount = convertToDebtAccount(userId, orgCodeLong, account);
                debtMapper.insertDebt(debtAccount);
                log.info("ÏÉàÎ°úÏö¥ ÎåÄÏ∂úÍ≥ÑÏ¢å Ï†ÄÏû•: {}", account.getResAccount());

                // ÎåÄÏ∂ú Í±∞ÎûòÎÇ¥Ïó≠ Ï°∞Ìöå Î∞è Ï†ÄÏû•
                syncLoanTransactionHistory(userId, connectedId, organizationCode, account.getResAccount());

            } catch (Exception e) {
                log.error("ÎåÄÏ∂úÍ≥ÑÏ¢å ÎèôÍ∏∞Ìôî Ïã§Ìå®: account={}", account.getResAccount(), e);
            }
        }
    }

    private void syncTransactionHistory(Long userId, String connectedId, String organizationCode, String accountNumber) {
        try {
            // ‚úÖ Í∏∞Î≥∏ Ï°∞Ìöå Í∏∞Í∞Ñ ÏÑ§Ï†ï (ÏµúÍ∑º 6Í∞úÏõî)
            String endDate = LocalDate.now().format(DateTimeFormatter.ofPattern("yyyyMMdd"));
            String startDate = LocalDate.now().minusMonths(6).format(DateTimeFormatter.ofPattern("yyyyMMdd"));

            log.info("Í±∞ÎûòÎÇ¥Ïó≠ ÎèôÍ∏∞Ìôî ÏãúÏûë: account={}, Ï°∞ÌöåÍ∏∞Í∞Ñ={}~{}", accountNumber, startDate, endDate);

            // ‚úÖ ÎÇ†Ïßú Î≤îÏúÑÎ•º Ìè¨Ìï®Ìïú Í±∞ÎûòÎÇ¥Ïó≠ Ï°∞Ìöå
            TransactionListResponseDTO transactionList = getTransactionListWithDates(
                    connectedId, organizationCode, accountNumber, startDate, endDate);

            if (transactionList.getData() == null || transactionList.getData().getResTrHistoryList() == null) {
                log.warn("Í±∞ÎûòÎÇ¥Ïó≠Ïù¥ ÏóÜÏäµÎãàÎã§: account={}", accountNumber);
                return;
            }

            // ÏòàÍ∏àÍ≥ÑÏ¢å Ï†ïÎ≥¥ Ï°∞Ìöå
            DepositAccount depositAccount = depositAccountMapper.findByUserIdAndAccountNumber(userId, accountNumber);
            if (depositAccount == null) {
                log.warn("ÏòàÍ∏àÍ≥ÑÏ¢å Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§: {}", accountNumber);
                return;
            }

            int savedCount = 0;
            int duplicateCount = 0;
            int totalCount = transactionList.getData().getResTrHistoryList().size();

            for (TransactionListResponseDTO.TransactionDetail transaction : transactionList.getData().getResTrHistoryList()) {
                try {
                    // Í±∞Îûò ÎÇ†ÏßúÏôÄ ÏãúÍ∞Ñ ÌååÏã±
                    LocalDateTime transactionTime = parseTransactionDateTime(
                            transaction.getResAccountTrDate(),
                            transaction.getResAccountTrTime()
                    );

                    // Í±∞Îûò Í∏àÏï° Î∞è ÌÉÄÏûÖ Í≤∞Ï†ï
                    BigDecimal amount = BigDecimal.ZERO;
                    String type = "";

                    if (transaction.getResAccountIn() != null && !transaction.getResAccountIn().equals("0")) {
                        // ÏûÖÍ∏à
                        amount = new BigDecimal(transaction.getResAccountIn());
                        type = "TRANSFER";
                    } else if (transaction.getResAccountOut() != null && !transaction.getResAccountOut().equals("0")) {
                        // Ï∂úÍ∏à
                        amount = new BigDecimal(transaction.getResAccountOut());
                        type = "WITHDRAW";
                    } else {
                        continue; // Í∏àÏï°Ïù¥ 0Ïù∏ Í±∞ÎûòÎäî Í±¥ÎÑàÎõ∞Í∏∞
                    }

                    // ‚úÖ Í∞úÏÑ†Îêú Ï§ëÎ≥µ Í±∞Îûò Ï≤¥ÌÅ¨
                    if (depositMapper.isTransactionExists(userId, transactionTime, amount, type)) {
                        duplicateCount++;
                        continue;
                    }

                    // Í±∞ÎûòÎÇ¥Ïó≠ Ï†ÄÏû•
                    Transaction transactionEntity = Transaction.builder()
                            .depositAccountId(depositAccount.getId())
                            .userId(userId)
                            .transactionTime(transactionTime)
                            .afterBalance(new BigDecimal(transaction.getResAfterTranBalance() != null ? transaction.getResAfterTranBalance() : "0"))
                            .amount(amount)
                            .type(type)
                            .resAccountDesc1(transaction.getResAccountDesc1())
                            .resAccountDesc2(transaction.getResAccountDesc2())
                            .resAccountDesc3(transaction.getResAccountDesc3())
                            .build();

                    // ‚úÖ Í∞úÏÑ†Îêú Í±∞ÎûòÎÇ¥Ïó≠ Ï†ÄÏû•
                    depositMapper.insertTransaction(transactionEntity);
                    savedCount++;

                } catch (Exception e) {
                    log.error("Í∞úÎ≥Ñ Í±∞ÎûòÎÇ¥Ïó≠ Ï†ÄÏû• Ïã§Ìå®: ÎÇ†Ïßú={}, Í∏àÏï°={}",
                            transaction.getResAccountTrDate(),
                            transaction.getResAccountIn() != null ? transaction.getResAccountIn() : transaction.getResAccountOut(), e);
                }
            }

            log.info("Í±∞ÎûòÎÇ¥Ïó≠ ÎèôÍ∏∞Ìôî ÏôÑÎ£å: account={} -> Ï¥ù {}Í±¥ Ï§ë {}Í±¥ Ï†ÄÏû•, {}Í±¥ Ï§ëÎ≥µ Ïä§ÌÇµ",
                    accountNumber, totalCount, savedCount, duplicateCount);

        } catch (Exception e) {
            log.error("Í±∞ÎûòÎÇ¥Ïó≠ ÎèôÍ∏∞Ìôî Ïã§Ìå®: account={}", accountNumber, e);
        }
    }

    private void syncLoanTransactionHistory(Long userId, String connectedId, String organizationCode, String accountNumber) {
        try {
            // ‚úÖ Ï°∞Ìöå Í∏∞Í∞Ñ ÏÑ§Ï†ï (ÏµúÍ∑º 1ÎÖÑ)
            String endDate = LocalDate.now().format(DateTimeFormatter.ofPattern("yyyyMMdd"));
            String startDate = LocalDate.now().minusYears(1).format(DateTimeFormatter.ofPattern("yyyyMMdd"));

            log.info("ÎåÄÏ∂ú Í±∞ÎûòÎÇ¥Ïó≠ ÎèôÍ∏∞Ìôî ÏãúÏûë: account={}, Ï°∞ÌöåÍ∏∞Í∞Ñ={}~{}", accountNumber, startDate, endDate);

            LoanTransactionResponseDTO loanTransactionList = getLoanTransactionList(
                    connectedId, organizationCode, accountNumber, startDate, endDate);

            if (loanTransactionList.getData() == null || loanTransactionList.getData().getResTrHistoryList() == null) {
                log.warn("ÎåÄÏ∂ú Í±∞ÎûòÎÇ¥Ïó≠Ïù¥ ÏóÜÏäµÎãàÎã§: account={}", accountNumber);
                return;
            }

            // ‚úÖ ÎåÄÏ∂úÍ≥ÑÏ¢å Ï†ïÎ≥¥ Ï°∞Ìöå
            DebtAccount debtAccount = debtMapper.findByUserIdAndAccount(userId, accountNumber);
            if (debtAccount == null) {
                log.warn("ÎåÄÏ∂úÍ≥ÑÏ¢å Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§: {}", accountNumber);
                return;
            }

            int savedCount = 0;
            int duplicateCount = 0;
            int totalCount = loanTransactionList.getData().getResTrHistoryList().size();

            for (LoanTransactionResponseDTO.LoanTransactionDetail transaction : loanTransactionList.getData().getResTrHistoryList()) {
                try {
                    // Í±∞Îûò ÎÇ†Ïßú ÌååÏã±
                    LocalDate transactionDate = parseDate(transaction.getTransactionDate());

                    // ‚úÖ Ï§ëÎ≥µ Ï≤¥ÌÅ¨ (DebtTransactionMapper ÌïÑÏöî)
                    if (debtTransactionMapper.isDebtTransactionExists(debtAccount.getId(), transactionDate)) {
                        duplicateCount++;
                        continue;
                    }

                    // ‚úÖ ÎåÄÏ∂ú Í±∞ÎûòÎÇ¥Ïó≠ Ï†ÄÏû•
                    DebtTransaction debtTransaction = DebtTransaction.builder()
                            .debtAccountId(debtAccount.getId())
                            .transactionDate(transactionDate)
                            .principalAmount(new BigDecimal(transaction.getPrincipalAmount() != null ? transaction.getPrincipalAmount() : "0"))
                            .interestAmount(new BigDecimal(transaction.getInterestAmount() != null ? transaction.getInterestAmount() : "0"))
                            .remainingBalance(new BigDecimal(transaction.getRemainingBalance() != null ? transaction.getRemainingBalance() : "0"))
                            .createdAt(LocalDateTime.now())
                            .build();

                    debtTransactionMapper.insertDebtTransaction(debtTransaction);
                    savedCount++;

                } catch (Exception e) {
                    log.error("Í∞úÎ≥Ñ ÎåÄÏ∂ú Í±∞ÎûòÎÇ¥Ïó≠ Ï†ÄÏû• Ïã§Ìå®: ÎÇ†Ïßú={}", transaction.getTransactionDate(), e);
                }
            }

            log.info("ÎåÄÏ∂ú Í±∞ÎûòÎÇ¥Ïó≠ ÎèôÍ∏∞Ìôî ÏôÑÎ£å: account={} -> Ï¥ù {}Í±¥ Ï§ë {}Í±¥ Ï†ÄÏû•, {}Í±¥ Ï§ëÎ≥µ Ïä§ÌÇµ",
                    accountNumber, totalCount, savedCount, duplicateCount);

        } catch (Exception e) {
            log.error("ÎåÄÏ∂ú Í±∞ÎûòÎÇ¥Ïó≠ ÎèôÍ∏∞Ìôî Ïã§Ìå®: account={}", accountNumber, e);
        }
    }

    private Long getOrCreateFinancialInstitution(String organizationCode) {
        Long orgCodeLong = financialInstitutionMapper.findCodeByName(organizationCode);
        if (orgCodeLong == null) {
            // organizationCodeÎ•º Ïù¥Î¶ÑÏúºÎ°ú ÏÇ¨Ïö© (Ïã§Ï†úÎ°úÎäî Îß§Ìïë ÌÖåÏù¥Î∏î ÌïÑÏöî)
            String organizationName = getOrganizationName(organizationCode);
            financialInstitutionMapper.insertInstitution(organizationName);
            orgCodeLong = financialInstitutionMapper.findCodeByName(organizationName);
        }
        return orgCodeLong;
    }

    private String getOrganizationName(String organizationCode) {
        // Í∏àÏúµÍ∏∞Í¥Ä ÏΩîÎìúÎ•º Ïù¥Î¶ÑÏúºÎ°ú Îß§Ìïë
        Map<String, String> codeToNameMap = new HashMap<>();
        codeToNameMap.put("0081", "ÌïòÎÇòÏùÄÌñâ");
        codeToNameMap.put("0020", "Ïö∞Î¶¨ÏùÄÌñâ");
        codeToNameMap.put("0088", "Ïã†ÌïúÏùÄÌñâ");
        codeToNameMap.put("0004", "KBÍµ≠ÎØºÏùÄÌñâ");
        // Ï∂îÍ∞Ä Í∏àÏúµÍ∏∞Í¥ÄÎì§...

        return codeToNameMap.getOrDefault(organizationCode, "Í∏∞ÌÉÄÍ∏àÏúµÍ∏∞Í¥Ä");
    }

    private DebtAccount convertToDebtAccount(Long userId, Long organizationCode, AccountListResponseDTO.LoanAccount account) {
        return DebtAccount.builder()
                .userId(userId)
                .organizationCode(organizationCode)
                .resAccount(account.getResAccount())
                .debtName(account.getResAccountName() != null ? account.getResAccountName() : "ÎåÄÏ∂ú")
                .currentBalance(new BigDecimal(account.getResAccountBalance() != null ? account.getResAccountBalance() : "0"))
                .originalAmount(new BigDecimal(account.getResAccountBalance() != null ? account.getResAccountBalance() : "0"))
                .interestRate(new BigDecimal("0.00")) // CODEFÏóêÏÑú Ïù¥ÏûêÏú® Ï†ïÎ≥¥Î•º Î≥ÑÎèÑÎ°ú Ï°∞ÌöåÌï¥Ïïº Ìï®
                .loanStartDate(parseDate(account.getResAccountStartDate()))
                .loanEndDate(parseDate(account.getResAccountEndDate()))
                .nextPaymentDate(LocalDate.now().plusMonths(1)) // Í∏∞Î≥∏Í∞í
                .gracePeriodMonths(0L)
                .repaymentMethod("ÏõêÎ¶¨Í∏àÍ∑†Îì±ÏÉÅÌôò") // Í∏∞Î≥∏Í∞í
                .createdAt(LocalDateTime.now())
                .updatedAt(LocalDateTime.now())
                .build();
    }

    private LocalDate parseDate(String dateString) {
        if (dateString == null || dateString.isEmpty()) {
            return LocalDate.now();
        }
        try {
            return LocalDate.parse(dateString, DateTimeFormatter.ofPattern("yyyyMMdd"));
        } catch (Exception e) {
            log.warn("ÎÇ†Ïßú ÌååÏã± Ïã§Ìå®: {}", dateString);
            return LocalDate.now();
        }
    }

    private LocalDateTime parseTransactionDateTime(String dateString, String timeString) {
        try {
            LocalDate date = LocalDate.parse(dateString, DateTimeFormatter.ofPattern("yyyyMMdd"));

            if (timeString != null && timeString.length() >= 6) {
                int hour = Integer.parseInt(timeString.substring(0, 2));
                int minute = Integer.parseInt(timeString.substring(2, 4));
                int second = Integer.parseInt(timeString.substring(4, 6));
                return date.atTime(hour, minute, second);
            } else {
                return date.atStartOfDay();
            }
        } catch (Exception e) {
            log.warn("Í±∞Îûò ÎÇ†Ïßú/ÏãúÍ∞Ñ ÌååÏã± Ïã§Ìå®: date={}, time={}", dateString, timeString);
            return LocalDateTime.now();
        }
    }

    @Override
    public String getConnectedIdByUserId(Long userId) {
        User user = userMapper.findById(userId);
        if (user == null) {
            throw new IllegalArgumentException("ÏÇ¨Ïö©ÏûêÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.");
        }
        return user.getConnectedId();
    }

    /**
     * ÏÇ¨Ïö©Ïûê Connected ID ÏóÖÎç∞Ïù¥Ìä∏
     */
    public void updateUserConnectedId(Long userId, String connectedId) {
        User user = userMapper.findById(userId);
        if (user == null) {
            throw new IllegalArgumentException("ÏÇ¨Ïö©ÏûêÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.");
        }

        // UserMapperÏóê updateConnectedId Î©îÏÑúÎìú Ï∂îÍ∞Ä ÌïÑÏöî
        // userMapper.updateConnectedId(userId, connectedId);
        log.info("ÏÇ¨Ïö©Ïûê Connected ID ÏóÖÎç∞Ïù¥Ìä∏: userId={}, connectedId={}", userId, connectedId);
    }

    /**
     * Í≥ÑÏ¢å Ïó∞Îèô ÏÉÅÌÉú Ï≤¥ÌÅ¨
     */
    public boolean isAccountLinked(Long userId) {
        User user = userMapper.findById(userId);
        if (user == null) {
            return false;
        }
        return user.getConnectedId() != null && !user.getConnectedId().isEmpty();
    }

    /**
     * Ï†ÑÏ≤¥ ÏÇ¨Ïö©Ïûê Í≥ÑÏ¢å Îç∞Ïù¥ÌÑ∞ Î∞∞Ïπò ÎèôÍ∏∞Ìôî
     */
    @Transactional
    public void batchSyncAllUsers() {
        try {
            // Î™®Îì† Connected IDÍ∞Ä ÏûàÎäî ÏÇ¨Ïö©Ïûê Ï°∞Ìöå (Ïã§Ï†úÎ°úÎäî UserMapperÏóê Î©îÏÑúÎìú Ï∂îÍ∞Ä ÌïÑÏöî)
            List<Long> userIds = Arrays.asList(1L, 2L); // ÏûÑÏãú Íµ¨ÌòÑ

            for (Long userId : userIds) {
                try {
                    syncUserAccountData(userId);
                    log.info("ÏÇ¨Ïö©Ïûê {}Ïùò Í≥ÑÏ¢å Îç∞Ïù¥ÌÑ∞ ÎèôÍ∏∞Ìôî ÏôÑÎ£å", userId);
                } catch (Exception e) {
                    log.error("ÏÇ¨Ïö©Ïûê {}Ïùò Í≥ÑÏ¢å Îç∞Ïù¥ÌÑ∞ ÎèôÍ∏∞Ìôî Ïã§Ìå®", userId, e);
                    // Í∞úÎ≥Ñ ÏÇ¨Ïö©Ïûê Ïã§Ìå®Ìï¥ÎèÑ Í≥ÑÏÜç ÏßÑÌñâ
                }
            }

        } catch (Exception e) {
            log.error("Ï†ÑÏ≤¥ ÏÇ¨Ïö©Ïûê Í≥ÑÏ¢å Îç∞Ïù¥ÌÑ∞ Î∞∞Ïπò ÎèôÍ∏∞Ìôî Ïã§Ìå®", e);
            throw new RuntimeException("Î∞∞Ïπò ÎèôÍ∏∞Ìôî Ïã§Ìå®", e);
        }
    }
}
